{"version":3,"names":["React","render","fireEvent","waitFor","MaskedTextInput","Button","Keyboard","InputAccessoryView","describe","mockedOnChangeText","jest","fn","test","container","expect","toMatchSnapshot","onChangeTextMock","changeText","getByTestId","toHaveBeenCalledWith","getByDisplayValue","toBeTruthy","prefix","decimalSeparator","groupSeparator","precision","dismiss","tree","toJSON","props","inputAccessoryViewID","toBe","nativeID","toHaveStyle","fontWeight","fontStyle","textDecorationLine"],"sources":["MaskedTextInput.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport { MaskedTextInput } from './MaskedTextInput';\nimport { Button, Keyboard, InputAccessoryView } from 'react-native';\n\n\ndescribe('<MaskedTextInput />', () => {\n  const mockedOnChangeText = jest.fn();\n\n  test('should render correctly without a mask', () => {\n    const container = render(\n      <MaskedTextInput value=\"with space and special* characters;\" onChangeText={mockedOnChangeText} />,\n    );\n    expect(container).toMatchSnapshot();\n  })\n\n  test('should preserve spaces in rawText when no mask is provided', async () => {\n    const onChangeTextMock = jest.fn();\n    const container = render(\n      <MaskedTextInput\n        onChangeText={onChangeTextMock}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'test test')\n\n    await waitFor(() => {\n      expect(onChangeTextMock).toHaveBeenCalledWith('test test', 'test test')\n    })\n  })\n\n  test('should remove spaces in rawText when mask is provided', async () => {\n    const onChangeTextMock = jest.fn();\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={onChangeTextMock}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'ABC 123')\n\n    await waitFor(() => {\n      expect(onChangeTextMock).toHaveBeenCalledWith('ABC-123', 'ABC123')\n    })\n  })\n\n  test('should renders correctly with custom mask', () => {\n    const container = render(\n      <MaskedTextInput mask=\"AAA-999\" onChangeText={mockedOnChangeText} />,\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with custom mask default value', () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        defaultValue=\"ABC-123\"\n      />\n    );\n    expect(container.getByDisplayValue('ABC-123')).toBeTruthy()\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n      />\n    );\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should mask input text with custom mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        mask=\"AAA-999\"\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), 'RCT777')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('RCT-777')).toBeTruthy()\n    })\n  });\n\n  test('should mask input text with currency mask', async () => {\n    const container = render(\n      <MaskedTextInput\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n        onChangeText={mockedOnChangeText}\n        testID=\"masked-text-input\"\n      />\n    );\n\n    fireEvent.changeText(container.getByTestId('masked-text-input'), '5999')\n\n    await waitFor(() => {\n      expect(container.getByDisplayValue('$59.99')).toBeTruthy()\n    })\n  });\n\n  test('should renders correctly with an accessory view', () => {\n    const container = render(\n      <MaskedTextInput         \n      type=\"currency\"\n      options={{\n        prefix: '$',\n        decimalSeparator: '.',\n        groupSeparator: ',',\n        precision: 2,\n      }} \n      onChangeText={mockedOnChangeText} \n      inputAccessoryViewID='Done'\n      inputAccessoryView={\n        <InputAccessoryView nativeID='Done'>\n        <Button\n          onPress={() => Keyboard.dismiss()}\n          title=\"Clear text\"\n        />\n        </InputAccessoryView>\n      }\n      />,\n    );\n\n    const tree = container.toJSON();\n    expect(tree[0].props.inputAccessoryViewID).toBe('Done');\n    expect(tree[1].props.nativeID).toBe('Done');\n  });\n  test('should be bold when the textBold attribute is added', () => {\n    const container  =\n    render(<MaskedTextInput \n      testID=\"masked-text-input\" \n      onChangeText={mockedOnChangeText} \n      textBold \n      mask=\"99/99/9999\"\n      />)\n      expect(container.getByTestId('masked-text-input')).toHaveStyle({fontWeight: 'bold' });\n    });\n    test('should be italic when the textItalic attribute is added', () => {\n      const container  =\n      render(<MaskedTextInput \n        testID=\"masked-text-input\" \n        onChangeText={mockedOnChangeText} \n        textItalic \n        mask=\"99/99/9999\"\n        />)\n        expect(container.getByTestId('masked-text-input')).toHaveStyle({fontStyle: 'italic' });\n    });\n    test('should be the line style added to the text when the textDecoration attribute has a non-null value', () => {\n      const textDecorationLine = 'underline'\n      const container  =\n      render(<MaskedTextInput\n        testID=\"masked-text-input\" \n        onChangeText={mockedOnChangeText} \n        textDecoration={textDecorationLine} \n        mask=\"99/99/9999\"\n        />)\n        expect(container.getByTestId('masked-text-input')).toHaveStyle({textDecorationLine: textDecorationLine });\n    });  \n});\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA2C,+BAA3C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,kBAA3B,QAAqD,cAArD;AAGAC,QAAQ,CAAC,qBAAD,EAAwB,MAAM;EACpC,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,EAAL,EAA3B;EAEAC,IAAI,CAAC,wCAAD,EAA2C,MAAM;IACnD,MAAMC,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MAAiB,KAAK,EAAC,qCAAvB;MAA6D,YAAY,EAAEQ;IAA3E,EADsB,CAAxB;IAGAK,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;EACD,CALG,CAAJ;EAOAH,IAAI,CAAC,4DAAD,EAA+D,YAAY;IAC7E,MAAMI,gBAAgB,GAAGN,IAAI,CAACC,EAAL,EAAzB;IACA,MAAME,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MACE,YAAY,EAAEe,gBADhB;MAEE,MAAM,EAAC;IAFT,EADsB,CAAxB;IAOAd,SAAS,CAACe,UAAV,CAAqBJ,SAAS,CAACK,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,WAAjE;IAEA,MAAMf,OAAO,CAAC,MAAM;MAClBW,MAAM,CAACE,gBAAD,CAAN,CAAyBG,oBAAzB,CAA8C,WAA9C,EAA2D,WAA3D;IACD,CAFY,CAAb;EAGD,CAdG,CAAJ;EAgBAP,IAAI,CAAC,uDAAD,EAA0D,YAAY;IACxE,MAAMI,gBAAgB,GAAGN,IAAI,CAACC,EAAL,EAAzB;IACA,MAAME,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,SADP;MAEE,YAAY,EAAEe,gBAFhB;MAGE,MAAM,EAAC;IAHT,EADsB,CAAxB;IAQAd,SAAS,CAACe,UAAV,CAAqBJ,SAAS,CAACK,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,SAAjE;IAEA,MAAMf,OAAO,CAAC,MAAM;MAClBW,MAAM,CAACE,gBAAD,CAAN,CAAyBG,oBAAzB,CAA8C,SAA9C,EAAyD,QAAzD;IACD,CAFY,CAAb;EAGD,CAfG,CAAJ;EAiBAP,IAAI,CAAC,2CAAD,EAA8C,MAAM;IACtD,MAAMC,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MAAiB,IAAI,EAAC,SAAtB;MAAgC,YAAY,EAAEQ;IAA9C,EADsB,CAAxB;IAGAK,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;EACD,CALG,CAAJ;EAOAH,IAAI,CAAC,yDAAD,EAA4D,MAAM;IACpE,MAAMC,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,SADP;MAEE,YAAY,EAAEQ,kBAFhB;MAGE,YAAY,EAAC;IAHf,EADsB,CAAxB;IAOAK,MAAM,CAACD,SAAS,CAACO,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;EACD,CATG,CAAJ;EAWAT,IAAI,CAAC,6CAAD,EAAgD,MAAM;IACxD,MAAMC,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPqB,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ,CAFX;MAQE,YAAY,EAAEhB;IARhB,EADsB,CAAxB;IAYAK,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;EACD,CAdG,CAAJ;EAgBAH,IAAI,CAAC,yCAAD,EAA4C,YAAY;IAC1D,MAAMC,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,SADP;MAEE,YAAY,EAAEQ,kBAFhB;MAGE,MAAM,EAAC;IAHT,EADsB,CAAxB;IAQAP,SAAS,CAACe,UAAV,CAAqBJ,SAAS,CAACK,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,QAAjE;IAEA,MAAMf,OAAO,CAAC,MAAM;MAClBW,MAAM,CAACD,SAAS,CAACO,iBAAV,CAA4B,SAA5B,CAAD,CAAN,CAA+CC,UAA/C;IACD,CAFY,CAAb;EAGD,CAdG,CAAJ;EAgBAT,IAAI,CAAC,2CAAD,EAA8C,YAAY;IAC5D,MAAMC,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPqB,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ,CAFX;MAQE,YAAY,EAAEhB,kBARhB;MASE,MAAM,EAAC;IATT,EADsB,CAAxB;IAcAP,SAAS,CAACe,UAAV,CAAqBJ,SAAS,CAACK,WAAV,CAAsB,mBAAtB,CAArB,EAAiE,MAAjE;IAEA,MAAMf,OAAO,CAAC,MAAM;MAClBW,MAAM,CAACD,SAAS,CAACO,iBAAV,CAA4B,QAA5B,CAAD,CAAN,CAA8CC,UAA9C;IACD,CAFY,CAAb;EAGD,CApBG,CAAJ;EAsBAT,IAAI,CAAC,iDAAD,EAAoD,MAAM;IAC5D,MAAMC,SAAS,GAAGZ,MAAM,eACtB,oBAAC,eAAD;MACA,IAAI,EAAC,UADL;MAEA,OAAO,EAAE;QACPqB,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ,CAFT;MAQA,YAAY,EAAEhB,kBARd;MASA,oBAAoB,EAAC,MATrB;MAUA,kBAAkB,eAChB,oBAAC,kBAAD;QAAoB,QAAQ,EAAC;MAA7B,gBACA,oBAAC,MAAD;QACE,OAAO,EAAE,MAAMH,QAAQ,CAACoB,OAAT,EADjB;QAEE,KAAK,EAAC;MAFR,EADA;IAXF,EADsB,CAAxB;IAsBA,MAAMC,IAAI,GAAGd,SAAS,CAACe,MAAV,EAAb;IACAd,MAAM,CAACa,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAcC,oBAAf,CAAN,CAA2CC,IAA3C,CAAgD,MAAhD;IACAjB,MAAM,CAACa,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAcG,QAAf,CAAN,CAA+BD,IAA/B,CAAoC,MAApC;EACD,CA1BG,CAAJ;EA2BAnB,IAAI,CAAC,qDAAD,EAAwD,MAAM;IAChE,MAAMC,SAAS,GACfZ,MAAM,eAAC,oBAAC,eAAD;MACL,MAAM,EAAC,mBADF;MAEL,YAAY,EAAEQ,kBAFT;MAGL,QAAQ,MAHH;MAIL,IAAI,EAAC;IAJA,EAAD,CADN;IAOEK,MAAM,CAACD,SAAS,CAACK,WAAV,CAAsB,mBAAtB,CAAD,CAAN,CAAmDe,WAAnD,CAA+D;MAACC,UAAU,EAAE;IAAb,CAA/D;EACD,CATC,CAAJ;EAUEtB,IAAI,CAAC,yDAAD,EAA4D,MAAM;IACpE,MAAMC,SAAS,GACfZ,MAAM,eAAC,oBAAC,eAAD;MACL,MAAM,EAAC,mBADF;MAEL,YAAY,EAAEQ,kBAFT;MAGL,UAAU,MAHL;MAIL,IAAI,EAAC;IAJA,EAAD,CADN;IAOEK,MAAM,CAACD,SAAS,CAACK,WAAV,CAAsB,mBAAtB,CAAD,CAAN,CAAmDe,WAAnD,CAA+D;MAACE,SAAS,EAAE;IAAZ,CAA/D;EACH,CATG,CAAJ;EAUAvB,IAAI,CAAC,mGAAD,EAAsG,MAAM;IAC9G,MAAMwB,kBAAkB,GAAG,WAA3B;IACA,MAAMvB,SAAS,GACfZ,MAAM,eAAC,oBAAC,eAAD;MACL,MAAM,EAAC,mBADF;MAEL,YAAY,EAAEQ,kBAFT;MAGL,cAAc,EAAE2B,kBAHX;MAIL,IAAI,EAAC;IAJA,EAAD,CADN;IAOEtB,MAAM,CAACD,SAAS,CAACK,WAAV,CAAsB,mBAAtB,CAAD,CAAN,CAAmDe,WAAnD,CAA+D;MAACG,kBAAkB,EAAEA;IAArB,CAA/D;EACH,CAVG,CAAJ;AAWH,CA7KO,CAAR"}