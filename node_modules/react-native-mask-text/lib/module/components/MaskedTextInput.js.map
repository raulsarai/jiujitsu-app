{"version":3,"names":["React","useEffect","useState","forwardRef","TextInput","mask","unMask","MaskedTextInputComponent","ref","pattern","type","options","defaultValue","onChangeText","value","inputAccessoryView","autoCapitalize","textBold","textItalic","textDecoration","style","rest","styleSheet","fontWeight","fontStyle","textDecorationLine","isMasked","getMaskedValue","getUnMaskedValue","updateStatesWithMasking","inputValue","newUnMaskedValue","newMaskedValue","setMaskedValue","setUnmaskedValue","setRawValue","updateStatesWithoutMasking","clearAllStates","defaultValueCustom","defaultValueCurrency","initialRawValue","initialMaskedValue","initialUnMaskedValue","maskedValue","unMaskedValue","rawValue","isInitialRender","setIsInitialRender","actualValue","handleChange","length","undefined","MaskedTextInput"],"sources":["MaskedTextInput.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { FormatType, MaskOptions, StyleObj, TextDecorationOptions } from 'src/@types'\n\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: FormatType\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n  inputAccessoryView?: JSX.Element\n  textBold?: boolean\n  textItalic?:boolean\n  textDecoration?:TextDecorationOptions\n  style?: StyleObj\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    value,\n    inputAccessoryView,\n    autoCapitalize = 'sentences',\n    textBold,\n    textItalic,\n    textDecoration,\n    style,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const styleSheet = [\n    {\n      fontWeight: textBold && 'bold',\n      fontStyle: textItalic && 'italic',\n      textDecorationLine: textDecoration\n    },\n    style\n  ]\n  \n  const isMasked = () => pattern || type === 'currency'\n  \n  const getMaskedValue = (value: string) =>\n    mask(value, pattern, type, options, autoCapitalize)\n  \n  const getUnMaskedValue = (value: string) =>\n    unMask(value, type as 'custom' | 'currency')\n\n  const updateStatesWithMasking = (inputValue: string) => {\n    const newUnMaskedValue = getUnMaskedValue(inputValue)\n    const newMaskedValue = getMaskedValue(newUnMaskedValue)\n    \n    setMaskedValue(newMaskedValue)\n    setUnmaskedValue(newUnMaskedValue)\n    setRawValue(inputValue)\n  }\n\n  const updateStatesWithoutMasking = (inputValue: string) => {\n    setMaskedValue(inputValue)\n    setUnmaskedValue(inputValue)\n    setRawValue(inputValue)\n  }\n\n  const clearAllStates = () => {\n    setMaskedValue('')\n    setUnmaskedValue('')\n    setRawValue('')\n  }\n\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n  const initialRawValue = value\n\n  const initialMaskedValue = isMasked()\n    ? getMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom)\n    : (value || defaultValueCustom)\n\n  const initialUnMaskedValue = isMasked()\n    ? getUnMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom)\n    : (value || defaultValueCustom)\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue)\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue)\n  const [rawValue, setRawValue] = useState(initialRawValue)\n  const [isInitialRender, setIsInitialRender] = useState(true)\n\n  const actualValue = isMasked() ? maskedValue : rawValue\n\n\n  const handleChange = (inputValue: string) => {\n    if (isMasked()) {\n      updateStatesWithMasking(inputValue)\n    } else {\n      updateStatesWithoutMasking(inputValue)\n    }\n  }\n\n  useEffect(() => {\n    if (isInitialRender) {\n      setIsInitialRender(false)\n      return\n    }\n\n    if (isMasked()) {\n      onChangeText(maskedValue, unMaskedValue)\n    } else {\n      onChangeText(rawValue || '', rawValue || '')\n    }\n  }, [maskedValue, unMaskedValue, rawValue])\n\n  useEffect(() => {\n    if (value) {\n      if (isMasked()) {\n        setMaskedValue(getMaskedValue(value))\n        setUnmaskedValue(getUnMaskedValue(value))\n      } else {\n        updateStatesWithoutMasking(value)\n      }\n    } else {\n      if (isMasked()) {\n        setMaskedValue(initialMaskedValue)\n        setUnmaskedValue(initialUnMaskedValue)\n      } else {\n        clearAllStates()\n      }\n    }\n  }, [value])\n\n  return (\n    <>\n      <TextInput\n        onChangeText={handleChange}\n        ref={ref}\n        maxLength={pattern.length || undefined}\n        autoCapitalize={autoCapitalize}\n        {...rest}\n        value={actualValue}\n        style={styleSheet as StyleObj}\n      />\n      {inputAccessoryView}\n    </>\n  )\n}\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent)\n"],"mappings":"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"}